// This file was generated by counterfeiter
package fakes

import (
	"sync"

	. "github.com/cloudfoundry-incubator/executor/api"
)

type FakeClient struct {
	PingStub        func() error
	pingMutex       sync.RWMutex
	pingArgsForCall []struct{}
	pingReturns struct {
		result1 error
	}
	AllocateContainerStub        func(allocationGuid string, request ContainerAllocationRequest) (Container, error)
	allocateContainerMutex       sync.RWMutex
	allocateContainerArgsForCall []struct {
		arg1 string
		arg2 ContainerAllocationRequest
	}
	allocateContainerReturns struct {
		result1 Container
		result2 error
	}
	GetContainerStub        func(allocationGuid string) (Container, error)
	getContainerMutex       sync.RWMutex
	getContainerArgsForCall []struct {
		arg1 string
	}
	getContainerReturns struct {
		result1 Container
		result2 error
	}
	InitializeContainerStub        func(allocationGuid string, request ContainerInitializationRequest) (Container, error)
	initializeContainerMutex       sync.RWMutex
	initializeContainerArgsForCall []struct {
		arg1 string
		arg2 ContainerInitializationRequest
	}
	initializeContainerReturns struct {
		result1 Container
		result2 error
	}
	RunStub        func(allocationGuid string, request ContainerRunRequest) error
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg1 string
		arg2 ContainerRunRequest
	}
	runReturns struct {
		result1 error
	}
	DeleteContainerStub        func(allocationGuid string) error
	deleteContainerMutex       sync.RWMutex
	deleteContainerArgsForCall []struct {
		arg1 string
	}
	deleteContainerReturns struct {
		result1 error
	}
	ListContainersStub        func() ([]Container, error)
	listContainersMutex       sync.RWMutex
	listContainersArgsForCall []struct{}
	listContainersReturns struct {
		result1 []Container
		result2 error
	}
	RemainingResourcesStub        func() (ExecutorResources, error)
	remainingResourcesMutex       sync.RWMutex
	remainingResourcesArgsForCall []struct{}
	remainingResourcesReturns struct {
		result1 ExecutorResources
		result2 error
	}
	TotalResourcesStub        func() (ExecutorResources, error)
	totalResourcesMutex       sync.RWMutex
	totalResourcesArgsForCall []struct{}
	totalResourcesReturns struct {
		result1 ExecutorResources
		result2 error
	}
}

func (fake *FakeClient) Ping() error {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.pingArgsForCall = append(fake.pingArgsForCall, struct{}{})
	if fake.PingStub != nil {
		return fake.PingStub()
	} else {
		return fake.pingReturns.result1
	}
}

func (fake *FakeClient) PingCallCount() int {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	return len(fake.pingArgsForCall)
}

func (fake *FakeClient) PingReturns(result1 error) {
	fake.pingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) AllocateContainer(arg1 string, arg2 ContainerAllocationRequest) (Container, error) {
	fake.allocateContainerMutex.Lock()
	defer fake.allocateContainerMutex.Unlock()
	fake.allocateContainerArgsForCall = append(fake.allocateContainerArgsForCall, struct {
		arg1 string
		arg2 ContainerAllocationRequest
	}{arg1, arg2})
	if fake.AllocateContainerStub != nil {
		return fake.AllocateContainerStub(arg1, arg2)
	} else {
		return fake.allocateContainerReturns.result1, fake.allocateContainerReturns.result2
	}
}

func (fake *FakeClient) AllocateContainerCallCount() int {
	fake.allocateContainerMutex.RLock()
	defer fake.allocateContainerMutex.RUnlock()
	return len(fake.allocateContainerArgsForCall)
}

func (fake *FakeClient) AllocateContainerArgsForCall(i int) (string, ContainerAllocationRequest) {
	fake.allocateContainerMutex.RLock()
	defer fake.allocateContainerMutex.RUnlock()
	return fake.allocateContainerArgsForCall[i].arg1, fake.allocateContainerArgsForCall[i].arg2
}

func (fake *FakeClient) AllocateContainerReturns(result1 Container, result2 error) {
	fake.allocateContainerReturns = struct {
		result1 Container
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetContainer(arg1 string) (Container, error) {
	fake.getContainerMutex.Lock()
	defer fake.getContainerMutex.Unlock()
	fake.getContainerArgsForCall = append(fake.getContainerArgsForCall, struct {
		arg1 string
	}{arg1})
	if fake.GetContainerStub != nil {
		return fake.GetContainerStub(arg1)
	} else {
		return fake.getContainerReturns.result1, fake.getContainerReturns.result2
	}
}

func (fake *FakeClient) GetContainerCallCount() int {
	fake.getContainerMutex.RLock()
	defer fake.getContainerMutex.RUnlock()
	return len(fake.getContainerArgsForCall)
}

func (fake *FakeClient) GetContainerArgsForCall(i int) string {
	fake.getContainerMutex.RLock()
	defer fake.getContainerMutex.RUnlock()
	return fake.getContainerArgsForCall[i].arg1
}

func (fake *FakeClient) GetContainerReturns(result1 Container, result2 error) {
	fake.getContainerReturns = struct {
		result1 Container
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) InitializeContainer(arg1 string, arg2 ContainerInitializationRequest) (Container, error) {
	fake.initializeContainerMutex.Lock()
	defer fake.initializeContainerMutex.Unlock()
	fake.initializeContainerArgsForCall = append(fake.initializeContainerArgsForCall, struct {
		arg1 string
		arg2 ContainerInitializationRequest
	}{arg1, arg2})
	if fake.InitializeContainerStub != nil {
		return fake.InitializeContainerStub(arg1, arg2)
	} else {
		return fake.initializeContainerReturns.result1, fake.initializeContainerReturns.result2
	}
}

func (fake *FakeClient) InitializeContainerCallCount() int {
	fake.initializeContainerMutex.RLock()
	defer fake.initializeContainerMutex.RUnlock()
	return len(fake.initializeContainerArgsForCall)
}

func (fake *FakeClient) InitializeContainerArgsForCall(i int) (string, ContainerInitializationRequest) {
	fake.initializeContainerMutex.RLock()
	defer fake.initializeContainerMutex.RUnlock()
	return fake.initializeContainerArgsForCall[i].arg1, fake.initializeContainerArgsForCall[i].arg2
}

func (fake *FakeClient) InitializeContainerReturns(result1 Container, result2 error) {
	fake.initializeContainerReturns = struct {
		result1 Container
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Run(arg1 string, arg2 ContainerRunRequest) error {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg1 string
		arg2 ContainerRunRequest
	}{arg1, arg2})
	if fake.RunStub != nil {
		return fake.RunStub(arg1, arg2)
	} else {
		return fake.runReturns.result1
	}
}

func (fake *FakeClient) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeClient) RunArgsForCall(i int) (string, ContainerRunRequest) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].arg1, fake.runArgsForCall[i].arg2
}

func (fake *FakeClient) RunReturns(result1 error) {
	fake.runReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteContainer(arg1 string) error {
	fake.deleteContainerMutex.Lock()
	defer fake.deleteContainerMutex.Unlock()
	fake.deleteContainerArgsForCall = append(fake.deleteContainerArgsForCall, struct {
		arg1 string
	}{arg1})
	if fake.DeleteContainerStub != nil {
		return fake.DeleteContainerStub(arg1)
	} else {
		return fake.deleteContainerReturns.result1
	}
}

func (fake *FakeClient) DeleteContainerCallCount() int {
	fake.deleteContainerMutex.RLock()
	defer fake.deleteContainerMutex.RUnlock()
	return len(fake.deleteContainerArgsForCall)
}

func (fake *FakeClient) DeleteContainerArgsForCall(i int) string {
	fake.deleteContainerMutex.RLock()
	defer fake.deleteContainerMutex.RUnlock()
	return fake.deleteContainerArgsForCall[i].arg1
}

func (fake *FakeClient) DeleteContainerReturns(result1 error) {
	fake.deleteContainerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) ListContainers() ([]Container, error) {
	fake.listContainersMutex.Lock()
	defer fake.listContainersMutex.Unlock()
	fake.listContainersArgsForCall = append(fake.listContainersArgsForCall, struct{}{})
	if fake.ListContainersStub != nil {
		return fake.ListContainersStub()
	} else {
		return fake.listContainersReturns.result1, fake.listContainersReturns.result2
	}
}

func (fake *FakeClient) ListContainersCallCount() int {
	fake.listContainersMutex.RLock()
	defer fake.listContainersMutex.RUnlock()
	return len(fake.listContainersArgsForCall)
}

func (fake *FakeClient) ListContainersReturns(result1 []Container, result2 error) {
	fake.listContainersReturns = struct {
		result1 []Container
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) RemainingResources() (ExecutorResources, error) {
	fake.remainingResourcesMutex.Lock()
	defer fake.remainingResourcesMutex.Unlock()
	fake.remainingResourcesArgsForCall = append(fake.remainingResourcesArgsForCall, struct{}{})
	if fake.RemainingResourcesStub != nil {
		return fake.RemainingResourcesStub()
	} else {
		return fake.remainingResourcesReturns.result1, fake.remainingResourcesReturns.result2
	}
}

func (fake *FakeClient) RemainingResourcesCallCount() int {
	fake.remainingResourcesMutex.RLock()
	defer fake.remainingResourcesMutex.RUnlock()
	return len(fake.remainingResourcesArgsForCall)
}

func (fake *FakeClient) RemainingResourcesReturns(result1 ExecutorResources, result2 error) {
	fake.remainingResourcesReturns = struct {
		result1 ExecutorResources
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) TotalResources() (ExecutorResources, error) {
	fake.totalResourcesMutex.Lock()
	defer fake.totalResourcesMutex.Unlock()
	fake.totalResourcesArgsForCall = append(fake.totalResourcesArgsForCall, struct{}{})
	if fake.TotalResourcesStub != nil {
		return fake.TotalResourcesStub()
	} else {
		return fake.totalResourcesReturns.result1, fake.totalResourcesReturns.result2
	}
}

func (fake *FakeClient) TotalResourcesCallCount() int {
	fake.totalResourcesMutex.RLock()
	defer fake.totalResourcesMutex.RUnlock()
	return len(fake.totalResourcesArgsForCall)
}

func (fake *FakeClient) TotalResourcesReturns(result1 ExecutorResources, result2 error) {
	fake.totalResourcesReturns = struct {
		result1 ExecutorResources
		result2 error
	}{result1, result2}
}

var _ Client = new(FakeClient)
